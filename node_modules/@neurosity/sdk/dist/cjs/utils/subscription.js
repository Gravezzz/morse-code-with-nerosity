"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.isMetricDisallowed = exports.hasInvalidLabels = exports.getLabels = exports.isMetric = void 0;
const ipk_1 = require("@neurosity/ipk");
const errors = __importStar(require("../utils/errors"));
const isMetric = (metric) => Object.keys(ipk_1.metrics).includes(metric);
exports.isMetric = isMetric;
const getLabels = (metric) => Object.keys(ipk_1.metrics[metric]);
exports.getLabels = getLabels;
const hasInvalidLabels = (metric, labels) => {
    const validLabels = (0, exports.getLabels)(metric);
    return !labels.every((label) => validLabels.includes(label));
};
exports.hasInvalidLabels = hasInvalidLabels;
const isMetricDisallowed = (metricName, options) => "skill" in options &&
    "metrics" in options.skill &&
    !options.skill.metrics.includes(metricName);
exports.isMetricDisallowed = isMetricDisallowed;
const validate = (metric, labels, options) => {
    const validLabels = (0, exports.getLabels)(metric).join(", ");
    if (!labels.length) {
        return new Error(`${errors.prefix}At least one label is required for ${metric} metric. Please add one of the following labels: ${validLabels}`);
    }
    if ((0, exports.isMetricDisallowed)(metric, options)) {
        return new Error(`${errors.prefix}No permission to access the ${metric} metric. To access this metric, edit the skill's permissions`);
    }
    if ((0, exports.hasInvalidLabels)(metric, labels)) {
        return new Error(`${errors.prefix}One ore more labels provided to ${metric} are invalid. The valid labels for ${metric} are ${validLabels}`);
    }
    return false;
};
exports.validate = validate;
