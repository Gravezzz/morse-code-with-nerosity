"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOAuthScopeForFunctionName = exports.validateOAuthScopeForAction = void 0;
const errors = __importStar(require("../utils/errors"));
const scopeRequiredByAction = {
    "marker/add": "write:brainwave-markers",
    "brainwaves/record": "write:brainwaves",
    "haptics/queue": "write:haptics",
    "training/record": "write:kinesis",
    "training/stop": "write:kinesis",
    "training/stopAll": "write:kinesis",
    "wifi/reset": "write:wifi-settings"
};
const scopeRequiredByFunctionName = {
    //metrics
    accelerometer: "read:accelerometer",
    brainwaves: "read:brainwaves",
    calm: "read:calm",
    focus: "read:focus",
    kinesis: "read:kinesis",
    predictions: "read:kinesis",
    signalQuality: "read:signal-quality",
    // end of metrics
    // device info
    getInfo: "read:devices-info",
    getSelectedDevice: "read:devices-info",
    selectDevice: "read:devices-info",
    onDeviceChange: "read:devices-info",
    onUserDevicesChange: "read:devices-info",
    osVersion: "read:devices-info",
    // end device info
    settings: "read:devices-settings",
    changeSettings: "write:devices-settings",
    status: "read:devices-status",
    addDevice: "write:devices-add",
    removeDevice: "write:devices-remove",
    transferDevice: "write:devices-remove"
};
function validateOAuthScopeForAction(userClaims, action) {
    const { oauth, scopes: scopesString } = userClaims !== null && userClaims !== void 0 ? userClaims : {};
    if (!oauth) {
        return [false, null];
    }
    const scopes = scopesString.split(",");
    const { command, action: actionName } = action;
    const requiredScope = scopeRequiredByAction[`${command}/${actionName}`];
    const hasRequireScopes = scopes.includes(requiredScope);
    if (hasRequireScopes) {
        return [false, null];
    }
    return [true, getScopeError(requiredScope)];
}
exports.validateOAuthScopeForAction = validateOAuthScopeForAction;
function validateOAuthScopeForFunctionName(userClaims, functionName) {
    const { oauth, scopes: scopesString } = userClaims !== null && userClaims !== void 0 ? userClaims : {};
    if (!oauth) {
        return [false, null];
    }
    const scopes = scopesString.split(",");
    const requiredScope = scopeRequiredByFunctionName[functionName];
    const hasRequireScopes = scopes.includes(requiredScope);
    if (hasRequireScopes) {
        return [false, null];
    }
    return [true, getScopeError(requiredScope)];
}
exports.validateOAuthScopeForFunctionName = validateOAuthScopeForFunctionName;
function getScopeError(...requiredScopes) {
    return new Error(`${errors.prefix}You are trying to access data with an OAuth token without access to the following scopes: ${requiredScopes.join(", ")}.`);
}
